# Start

# Thesis title: The Role of International Commitments in Combating the Illicit Distribution of Cocaine.
# Author: Raquel Baeta

# Data Source: United Nations Office on Drugs and Crime (UNODC).
# Variables: Annual wholesale and retail averages for all European countries in Euro, as well as the "Weighted* average, in Euro", and 
# "Euro-inflation-adjusted weighted* average, in 2020 Euro" for both wholesale and retail.

# Install Required Packages
install.packages("readxl")
install.packages("tidyr")
install.packages("dplyr")
install.packages("tidyverse")
install.packages("data.table")

# Load Libraries
library(readxl) # work with Excel files
library(tidyr) # data manipulation
library(dplyr) # data manipulation
library(data.table) # data manipulation
library(tidyverse) # data manipulation

# Step 1.1: Load the retail price data from the Excel file "price_dollar_western_europe.xlsx" and specify the relevant sheet and range.
retail_prices <- read_excel("price_dollar_western_europe.xlsx", 
                            sheet = 2, 
                            range = "A5:AF26")

# Rename the first column to "country" for better clarity.
colnames(retail_prices)[1] <- "country"

# 1.2: Use the %>% pipe operator from the "dplyr" package to perform a series of data manipulation steps.
retail_prices <- retail_prices %>%
  
  # Remove unwanted years
  select(-c("1990", "1991", "1992", "1993", "1994", "1995", "2020")) %>%
  
  # Filter out unwanted rows
  filter(!country %in%
             c("United Kingdom", 
               "Weighted* average, US$", 
               "Unweighted average, in US$",
               "Weighted* average, Euro",
               "Euro-inflation-adjusted weighted* average, in 2020 Euro"))

# 1.3: Reshape the data from wide to long format using the pivot_longer() function from the "tidyr" package. This function helps 
# transform the yearly columns (1996 to 2019) into a single "year" column and their corresponding values into a "retail" column.
retail_prices <- pivot_longer(retail_prices,
                              cols = c("1996":"2019"),
                              names_to = "year",
                              values_to = "retail")

# Step 2.1: Load the wholesale price data from the Excel file.
wholesale_prices <- read_excel("price_dollar_western_europe.xlsx", 
                               sheet = 2, 
                               range = "A34:AF55")

# Rename the first column to "country" for better clarity.
colnames(wholesale_prices)[1] <- "country" 

# 2.2: Use the %>% pipe operator from the "dplyr" package to perform a series of data manipulation steps.
wholesale_prices <- wholesale_prices %>%
  
  # Remove unwanted years
  select(-c("1990", "1991", "1992", "1993", "1994", "1995", "2020")) %>%
  
  # Filter out unwanted rows
  filter(!country %in%
           c("United Kingdom", 
             "Weighted* average, US$", 
             "Unweighted average, in US$", "Weighted* average, Euro per gram",
             "Euro-inflation-adjusted weighted* average, in 2020 Euro"))

# 2.3: Reshape the data from wide to long using the pivot_longer() function from the "tidyr" package. This function helps transform 
# yearly columns (1996 to 2019) into a single "year" column and their corresponding values into a "wholesale" column.
wholesale_prices <- pivot_longer(wholesale_prices,
                                 cols = c("1996":"2019"),
                                 names_to = "year",
                                 values_to = "wholesale")

# Step 3: Merge retail and wholesale price data. Use the full_join() function from the "dplyr" package to merge the retail and 
# wholesale price data. Specify the columns "country" and "year" as the joining keys. The result is a data set named "cocaine_prices" 
# that contains both retail and wholesale prices for each country and year.
prices <- full_join(retail_prices, 
                    wholesale_prices, 
                    by = c("country", "year"))

# Clean environment
rm(retail_prices, wholesale_prices)

# Step 4: Load and filter for the "Weighted* average, Euro" category.
retail_wght_average <- read_excel("price_dollar_western_europe.xlsx",
                                  sheet = 2,
                                  range = "A5:AF26")

# Rename the first column to "country" for better clarity.
colnames(retail_wght_average)[1] <- "country"

# 4.2: Use the %>% pipe operator from the "dplyr" package to perform a series of data manipulation steps.
retail_wght_average <- retail_wght_average %>%

  # Remove unwanted years
  select(-c("1990", "1991", "1992", "1993", "1994", "1995", "2020")) %>%

  # Filter out unwanted rows
  filter(country == "Weighted* average, Euro")

# 4.3: Reshape the data from wide to long using the pivot_longer() function from the "tidyr" package. This function helps transform yearly columns (1996 to 2019) into a single "year" column and their corresponding values into a "wholesale" column.
retail_wght_average <- pivot_longer(retail_wght_average,
                                    cols = c("1996":"2019"),
                                    names_to = "year",
                                    values_to = "retail_wgted_average")

# Remove the "country" column
retail_wght_average[1] <- NULL

# Step 5: Load and filter for the "Weighted* average, Euro per gram" category.
wholesale_wght_average <- read_excel("price_dollar_western_europe.xlsx",
                                     sheet = 2,
                                     range = "A34:AF55")

# Rename the first column to "country" for better clarity.
colnames(wholesale_wght_average)[1] <- "country"

# 5.2: Use the %>% pipe operator from the "dplyr" package to perform a series of data manipulation steps.
wholesale_wght_average <- wholesale_wght_average %>%

  # Remove unwanted years
  select(-c("1990", "1991", "1992", "1993", "1994", "1995", "2020")) %>%

  # Filter out unwanted rows
  filter(country == "Weighted* average, Euro per gram")

# 5.3: Reshape the data from wide to long using the pivot_longer() function from the "tidyr" package. This function helps transform 
# yearly columns (1996 to 2019) into a single "year" column and their corresponding values into a "wholesale" column.
wholesale_wght_average <- pivot_longer(wholesale_wght_average,
                                       cols = c("1996":"2019"),
                                       names_to = "year",
                                       values_to = "wholesale_wgted_average")

# Remove the "country" column
wholesale_wght_average[1] <- NULL

# Step 6: Use the merge() function to combine the different average price and wholesale data sets based on the "year" column. "all = 
# TRUE" argument to ensure that all years are included in the final data set.
wght_average <- merge(retail_wght_average, 
                      wholesale_wght_average, 
                      by = "year",
                      all = TRUE)

# Clean environment
rm(retail_wght_average, wholesale_wght_average) 

# Step 7: Load and filter for the "Euro-inflation-adjusted weighted* average, in 2020 Euro" category.
retail_inflation_average <- read_excel("price_dollar_western_europe.xlsx",
                                       sheet = 2,
                                       range = "A5:AF26")

# Rename the first column to "country" for better clarity.
colnames(retail_inflation_average)[1] <- "country"

# 7.2: Use the %>% pipe operator from the "dplyr" package to perform a series of data manipulation steps.
retail_inflation_average <- retail_inflation_average %>%

  # Remove unwanted years
  select(-c("1990", "1991", "1992", "1993", "1994", "1995", "2020")) %>%

  # Filter out unwanted rows
  filter(country == "Euro-inflation-adjusted weighted* average, in 2020 Euro")

# 7.3: Reshape the data from wide to long using the pivot_longer() function from the "tidyr" package. This function helps transform 
# yearly columns (1996 to 2019) into a single "year" column and their corresponding values into a "wholesale" column.
retail_inflation_average <- pivot_longer(retail_inflation_average,
                                         cols = c("1996":"2019"),
                                         names_to = "year",
                                         values_to = "retail_inflation_average")

# Remove the "country" column
retail_inflation_average[1] <- NULL

# Step 8: Load the average inflation-adjusted wholesale price data and filter for the "Euro-inflation-adjusted weighted* average, in 
# 2020 Euro" category.
wholesale_inflation_average <- read_excel("price_dollar_western_europe.xlsx",
                                          sheet = 2,
                                          range = "A34:AF55")

# Rename the first column to "country" for better clarity.
colnames(wholesale_inflation_average)[1] <- "country"

# 8.2: Use the %>% pipe operator from the "dplyr" package to perform a series of data manipulation steps.
wholesale_inflation_average <- wholesale_inflation_average %>%

  # Remove unwanted years
  select(-c("1990", "1991", "1992", "1993", "1994", "1995", "2020")) %>%

  # Filter out unwanted rows
  filter(country == "Euro-inflation-adjusted weighted* average, in 2020 Euro")

# 8.3: Reshape the data from wide to long using the pivot_longer() function from the "tidyr" package. This function helps transform 
# yearly columns (1996 to 2019) into a single "year" column and their corresponding values into a "wholesale" column.
wholesale_inflation_average <- pivot_longer(wholesale_inflation_average,
                                            cols = c("1996":"2019"),
                                            names_to = "year",
                                            values_to = "wholesale_inflation_average")

# Remove the "country" column
wholesale_inflation_average[1] <- NULL

# Step 9: Use the merge() function to combine the different average retail and wholesale price-adjusted data sets based on the "year" 
# column. "all = TRUE" argument to ensure that all years are included in the final data set.
inflation_average <- merge(wholesale_inflation_average, 
                           retail_inflation_average,
                           by = "year", 
                           all = TRUE)

# Clean environment
rm(wholesale_inflation_average, retail_inflation_average)

# Step 10: Use the merge() function to combine the different data sets based on the "year" column. "all = TRUE" argument to ensure that 
# all years are included in the final data set.
prices_avg <- merge(inflation_average, 
                    wght_average, 
                    by = "year", 
                    all = TRUE)

# Clean environment
rm(wght_average, inflation_average) 

# Step 11: Using the fwrite() function from the "data.table" package create two CSV files named  "prices.csv" and "prices_avg.csv".
fwrite(prices, "prices.csv")
fwrite(prices_avg, "prices_avg.csv")

# End
